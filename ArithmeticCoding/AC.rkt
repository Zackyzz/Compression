#lang racket
(require "../helpers/bitwr.rkt")
(require racket/format)

(define << arithmetic-shift)
(define (binarize val [len 32]) (~r val #:base 2 #:min-width len #:pad-string "0"))

(define SIZE 32)
(define N 257)

(define low 0)
(define max (- (<< 1 SIZE) 1))
(define 1:4/max (+ (<< max (- 3)) 1))
(define 2:4/max (<< 1:4/max 1))
(define 3:4/max (<< 1:4/max 2))

(define (get-interval index counts)
  (define count (list-ref counts index))
  (define sum (apply + (take counts index)))
  (define total-sum (apply + counts))
  (list sum (+ sum count) total-sum))

(define (make-sum counts)
  (define len (add1 (length counts) 0))
  (define sums (make-vector len))
  (for ([i (in-range 1 len)] [j counts])
    (vector-set! sums i (+ (vector-ref sums (- i 1)) j)))
  (vector-set! sums (sub1 len) (add1 (vector-ref sums (sub1 len))))
  sums)
                                
(define (arithmetic-coding file [counts (make-list 257 1)] [nr-bits 32])
  (define low 0)
  (define high (- (<< 1 nr-bits) 1))
  (define 1:4/max (+ (<< high (- 3)) 1))
  (define 2:4/max (<< high 1))
  (define 3:4/max (<< high 2))
  (define file-length (file-size file))
  (define bit-reader (new bit-reader% [path file]))
  (define bit-writer (new bit-writer% [path "testo.txt"]))
  (for ([i file-length])
    (define input (send bit-reader read-bits 8))
    (define range (+ (- high low) 1))
    (define interval (get-interval input counts))
    (set! high (sub1 (+ low (quotient (* (second interval) range) (third interval)))))
    (set! low (+ low (quotient (* (first interval) range) (third interval))))
    (let test ([storage 0] [n 0])
      (cond
        [(< high #x80000000)
         (send bit-writer write-bit 0)
         (for ([i storage])
           (send bit-writer write-bit 1))
         (set! low (bitwise-and (<< low 1) max))
         (set! high (bitwise-and (bitwise-ior (<< high 1) 1) max))
         (test 0 (+ 1 n))]
        [(>= low #x80000000)
         (send bit-writer write-bit 1)
         (for ([i storage])
           (send bit-writer write-bit 0))
         (set! low (bitwise-and (<< low 1) max))
         (set! high (bitwise-and (bitwise-ior (<< high 1) 1) max))
         (test 0 (+ 1 n))]
        [(and (>= low #x40000000) (< high #xC0000000))
         (set! low (bitwise-and (<< low 1) (sub1 3:4/max)))
         (set! high (bitwise-ior (<< high 1) (add1 3:4/max)))
         (test (+ 1 storage) (+ 1 n))]
        [else #f])))
  (send bit-reader close-file)
  (send bit-writer close-file))

(define (get-frequencies file)
  (define file-length (file-size file))
  (define bit-reader (new bit-reader% [path file]))
  (define vectoras (make-vector 256 0))
  (for ([i file-length])
    (define input (send bit-reader read-bits 8))
    (vector-set! vectoras input (add1 (vector-ref vectoras input))))
  (send bit-reader close-file)
  (vector->list vectoras))

(time (arithmetic-coding "pp.txt" (get-frequencies "pp.txt")))

(file-size "pp.txt")
(file-size "testo.txt")

